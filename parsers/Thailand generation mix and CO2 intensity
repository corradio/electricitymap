import arrow
import requests

def fetch_production(country_code='TH', session=None):
  r = session or requests.session()
    url = 'https://api.someservice.com/v1/productionmix/latest'
    response = r.get(url)
    obj = response.json()

    data = {
        'countryCode': 'TH',
        'datetime': '2016-06-01T00:00:00Z',
        'production': {'biomass': 6100.0,
          'coal': 34582.11,
          'gas': 128525.0,
          'hydro': 3760.73,
          'nuclear': null,
          'oil': 922.61,
          'solar': 3430.0,
          'wind': 348.0,
          'geothermal': 1.0,
          'unknown': 105.0},
        'storage': {'ancillary': -2.0,},
        'source': 'www.eppo.go.th',
    }
    for item in obj['productionMix']:
        # All production values should be >= 0
        data['production'][item['key']] = item['value'] # Should be a floating point value

    for item in obj['storage']:
        # Positive storage means energy is stored
        # Negative storage means energy is generated from the storage system
        data['storage'][item['key']] = item['value'] # Should be a floating point value

    # Parse the datetime and return a python datetime object
    data['datetime'] = arrow.get(obj['datetime']).datetime

    return data



def fetch_price(country_code='TH', session=None):
  r = session or requests.session()
    url = 'https://api.someservice.com/v1/price/latest'
    response = r.get(url)
    obj = response.json()

    data = {
        'countryCode': 'TH',
        'currency': 'THB',
        'datetime': '2016-06-01T00:00:00Z',
        'price': 0.0,
        'source': 'www.eppo.go.th',
    }

    # Parse the datetime and return a python datetime object
    data['datetime'] = arrow.get(obj['datetime']).datetime

    return data


def fetch_exchange(country_code1='DK', country_code2='NO', session=None):
  r = session or requests.session()
    url = 'https://api.someservice.com/v1/exchange/latest?from=%s&to=%s' % (country_code1, country_code2)
    response = r.get(url)
    obj = response.json()

    data = {
        'sortedCountryCodes': '->'.join(sorted([country_code1, country_code2])),
        'source': 'someservice.com',
    }

    # Country codes are sorted in order to enable easier indexing in the database
    sorted_country_codes = sorted([country_code1, country_code2])
    # Here we assume that the net flow returned by the api is the flow from 
    # country1 to country2. A positive flow indicates an export from country1
    # to country2. A negative flow indicates an import.
    netFlow = obj['exchange']
    # The net flow to be reported should be from the first country to the second
    # (sorted alphabetically). This is NOT necessarily the same direction as the flow
    # from country1 to country2
    data['netFlow'] = netFlow if country_code1 == sorted_country_codes[0] else -1 * netFlow

    # Parse the datetime and return a python datetime object
    data['datetime'] = arrow.get(obj['datetime']).datetime

    return data


if __name__ == '__main__':
    """Main method, never used by the Electricity Map backend, but handy for testing."""

    print 'fetch_production() ->'
    print fetch_production()
    print 'fetch_price() ->'
    print fetch_price()
    print 'fetch_exchange(DK, NO) ->'
    print fetch_exchange('DK', 'NO')
